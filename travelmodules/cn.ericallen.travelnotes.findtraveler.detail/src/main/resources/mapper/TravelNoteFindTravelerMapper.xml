<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.ericallen.travelnotes.dao.findtraveler.TravelNoteFindTravelerMapper" >
  <resultMap id="BaseResultMap" type="cn.ericallen.travelnotes.findtraveler.model.TravelNoteFindTraveler" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="apply_openid" property="applyOpenid" jdbcType="VARCHAR" />
    <result column="release_time" property="releaseTime" jdbcType="TIMESTAMP" />
    <result column="find_travelers_content" property="findTravelersContent" jdbcType="VARCHAR" />
    <result column="delete_flag" property="deleteFlag" jdbcType="TINYINT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, apply_openid, release_time, find_travelers_content, delete_flag, create_time, 
    update_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from t_travel_find_travelers
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from t_travel_find_travelers
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="cn.ericallen.travelnotes.findtraveler.model.TravelNoteFindTraveler" >
    insert into t_travel_find_travelers (id, apply_openid, release_time, 
      find_travelers_content, delete_flag, create_time, 
      update_time)
    values (#{id,jdbcType=BIGINT}, #{applyOpenid,jdbcType=VARCHAR}, #{releaseTime,jdbcType=TIMESTAMP}, 
      #{findTravelersContent,jdbcType=VARCHAR}, #{deleteFlag,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="cn.ericallen.travelnotes.findtraveler.model.TravelNoteFindTraveler" >
    insert into t_travel_find_travelers
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="applyOpenid != null" >
        apply_openid,
      </if>
      <if test="releaseTime != null" >
        release_time,
      </if>
      <if test="findTravelersContent != null" >
        find_travelers_content,
      </if>
      <if test="deleteFlag != null" >
        delete_flag,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="applyOpenid != null" >
        #{applyOpenid,jdbcType=VARCHAR},
      </if>
      <if test="releaseTime != null" >
        #{releaseTime,jdbcType=TIMESTAMP},
      </if>
      <if test="findTravelersContent != null" >
        #{findTravelersContent,jdbcType=VARCHAR},
      </if>
      <if test="deleteFlag != null" >
        #{deleteFlag,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.ericallen.travelnotes.findtraveler.model.TravelNoteFindTraveler" >
    update t_travel_find_travelers
    <set >
      <if test="applyOpenid != null" >
        apply_openid = #{applyOpenid,jdbcType=VARCHAR},
      </if>
      <if test="releaseTime != null" >
        release_time = #{releaseTime,jdbcType=TIMESTAMP},
      </if>
      <if test="findTravelersContent != null" >
        find_travelers_content = #{findTravelersContent,jdbcType=VARCHAR},
      </if>
      <if test="deleteFlag != null" >
        delete_flag = #{deleteFlag,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.ericallen.travelnotes.findtraveler.model.TravelNoteFindTraveler" >
    update t_travel_find_travelers
    set apply_openid = #{applyOpenid,jdbcType=VARCHAR},
      release_time = #{releaseTime,jdbcType=TIMESTAMP},
      find_travelers_content = #{findTravelersContent,jdbcType=VARCHAR},
      delete_flag = #{deleteFlag,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>